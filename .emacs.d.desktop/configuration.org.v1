


* Packages

** Define package repositories
#+BEGIN_SRC emacs-lisp 
(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("tromey" . "http://tromey.com/elpa/") t)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
;;                          ("marmalade" . "http://marmalade-repo.org/packages/")
;;                          ("melpa" . "http://melpa-stable.milkbox.net/packages/")))
#+END_SRC 

** Load and activate emacs packages. 
Do this first so that the
 packages are loaded before you start trying to modify them.
 This also sets the load path.
#+BEGIN_SRC emacs-lisp 
(package-initialize)
#+END_SRC 

** Download the ELPA archive description if needed.
This informs Emacs about the latest versions of all packages, and
makes them available for download.
#+BEGIN_SRC emacs-lisp 
(when (not package-archive-contents)
  (package-refresh-contents))
#+END_SRC 

** List of packages you want installed. 
You can also install these
manually with M-x package-install
Add in your own as you wish:
#+BEGIN_SRC emacs-lisp 
(defvar my-packages
  '(;; makes handling lisp expressions much, much easier
    ;; Cheatsheet: http://www.emacswiki.org/emacs/PareditCheatsheet
    paredit

    ;; key bindings and code colorization for Clojure
    ;; https://github.com/clojure-emacs/clojure-mode
    clojure-mode

    ;; extra syntax highlighting for clojure
    clojure-mode-extra-font-locking

    ;; integration with a Clojure REPL
    ;; https://github.com/clojure-emacs/cider
    cider

    ;; allow ido usage in as many contexts as possible. see
    ;; customizations/navigation.el line 23 for a description
    ;; of ido
    ido-ubiquitous

    ;; Enhances M-x to allow easier execution of commands. Provides
    ;; a filterable list of possible commands in the minibuffer
    ;; http://www.emacswiki.org/emacs/Smex
    smex

    ;; project navigation
    projectile

    ;; colorful parenthesis matching
    rainbow-delimiters

    ;; edit html tags like sexps
    tagedit

    ;; git integration
    magit))
#+END_SRC 

** Install the packages!
#+BEGIN_SRC emacs-lisp
(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
#+END_SRC


* Customization

** Add a directory to our load path
...so that when you `load` things below, Emacs knows where to 
look for the corresponding file.
#+BEGIN_SRC emacs-lisp 
(add-to-list 'load-path "~/.emacs.d/customizations")
#+END_SRC 

** Sets up exec-path-from-shell 
...so that Emacs will use the correct environment variables.
#+BEGIN_SRC emacs-lisp 
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs
   '("PATH")))
#+END_SRC 

** Navigation
These customizations make it easier for you to navigate files,
switch buffers, and choose options from the minibuffer.
#+BEGIN_SRC 
emacs-lisp (load "navigation.el") 
#+END_SRC 

** UI Tweaks
These customizations change the way emacs looks and disable/enable
some user interface elements
#+BEGIN_SRC 
emacs-lisp (load "ui.el") 
#+END_SRC 

** Editing Tweaks
These customizations make editing a bit nicer.
#+BEGIN_SRC emacs-lisp 
(load "editing.el")
#+END_SRC 

** Misc
Hard-to-categorize customizations
#+BEGIN_SRC emacs-lisp 
(load "misc.el")
#+END_SRC 

** Lisp-specific
For editing lisps
Automatically load paredit when editing a lisp file
More at http://www.emacswiki.org/emacs/ParEdit
#+BEGIN_SRC emacs-lisp 
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC 

eldoc-mode shows documentation in the minibuffer when writing code
http://www.emacswiki.org/emacs/ElDoc
#+BEGIN_SRC emacs-lisp 
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC 

** Language-specific
#+BEGIN_SRC emacs-lisp 
(load "setup-clojure.el")
(load "setup-js.el")
#+END_SRC 


* CMS Custom

Abbrev mode, always!
#+BEGIN_SRC emacs-lisp 
(setq default-abbrev-mode t)
#+END_SRC 

